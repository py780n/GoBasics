
NOTE: This page believes that readers will have basic knowledge of programing .

Requirement:  
============
	1)  Go environment should be installed in your PC
	2) 	"Hello World" Program is successfully run in your Go environment.
	3)  You should know how to run , build and execute your code. 
	
Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. 

Content:
1) Data Types : Number, String, Boolean
2) Variable :  variables declaration, Shorthand declaration , Constant declaration, Multiple Variables
3) Control Structures : for statement , if /else if statement , switch statement
4) Built in data-type :  Array , slice , Map
5) Functions :  Function , Variadic function , Defer , Panic and Recover
6) Pointers :  Pointers and New 
7) Structure : Structure , Method and interfaces
8) Concurrency : Goroutines , Channels ,Channel Direction  , Select Statement


============================================================
			Data Types
============================================================

NUMBERS:
*******

Integer :
  a) unsigned integer : represented as "uint"
	1) uint8
	2) unit16
	3) unit32
	4) unit64
 
  b) signed integer : represented as "int"
	1) int8
	2) int16
	3) int32
	4) int64


Floating point number :
 1) float32 
 2) floeat64

Complex number :
 1) complex64
 2) complex128

STRING
******

Strings are sequence of characters with a definite length used to represent text.  

example :
	"Go Programmer"
	"hello \n developer"  here the "\n" inside the double quotes is take as new line.   

Boolean 
*******

Boolean are 1-BIT integers , used for logical operations .

  && - and 
  || - or
  !  - not

============================================================
			VARIABLE
============================================================


A variable is a storage location with a specific name assigned to it

Eg: var name string = "Golang"

"var"    is the keyword
"name"   is the variable name 
"string" is the type

declaring shorthand Variable
****************************

Shorthand is used to declare variables without any type specified .
":=" should be used to  declare a variable 

  eg : name := "Programmer"
       number := 99

Note: Shorthand variable declarations can only be used inside a function/method

Scope concept :
**************

Variable that are declared within the block are not visible outside the clock ({<block>})

Constant Variable 
*****************

Constants are variables whose value cannot be changed . Constants are used to reuse common value within a program to avoid rewriting them . 

Eg : const constantVariable string = "this is a constant variable"

"const" 		is the keyword 
"constantVariable"	is the variable name 
"string"		is the type 

Defining Multiple Variables
***************************

Go provides a shorthand for declaring multi-line variable . 

Eg:	var ( 
		Variable1 = "developer" 
		Variable2 = 99     
		Variable3 = 22.7
	)

"var" is the keyword 
"( )" values inside the parentheses are vaiable names and its values 


============================================================
		Control Structures
============================================================
	"GO has only FOR loop!!!!!! :)" 

For loop / for statement 
************************

For allows us to repeat a set of statements within a block for specified number of times or when satisfying specific condition .
The for loop can be used in different ways . 

example code :
*************

package main

import "fmt"

func main() {
	//FOR Loop Method-1
	fmt.Println("### Method 1######")
	index := 1
	for index <= 10 {
		fmt.Println(index)
		index = index + 1
	}
	//FOR  loop Method-2
	fmt.Println("\n### Method 2######")
	for index := 10; index >= 0; index-- {
		fmt.Println(index)
	}
	//FOR  loop Method-3
	fmt.Println("\n### Method 3######")
	for index, limit := 100, 90; index >= limit; index-- {
		fmt.Println(index)
	}

}


IF Condition
************

The IF statement executes or skips a sequence of statements (block), depending on the value of a Boolean expression(true or false).


if/else statement structure :
****************************

if <condition>{
   if the condition is true this block is executed
}else{
   if the condition is false this block is executed 
}

if/else if statement structure :
******************************

if <condition-1>{
   if the condition-1 is true this block is executed and exits the block (<if/else if> block fully)
}else if <condition-2> {
   if the condition-2 is true this block is executed and exits the block (<if/else if> block fully)
}else if <condition-3> {
   if the condition-3 is true this block is executed and exits the block (<if/else if> block fully)
}else if <condition-4>{
   if the condition-4 is true this block is executed and exits the block (<if/else if> block fully)
}


example Code:
************

package main

import "fmt"

func main() {
	fmt.Println("\nif/else statement output\n")
	//example for if/else statement
	/*here we are checking if the number is odd or even .
	Go works in top down method the loop is incremented as the condition is
	satisfied */
	for value, limit := 1, 25; value <= limit; value++ {
		if value%2 == 0 {
			fmt.Println(value, " is even")
		} else {
			fmt.Println(value, " is odd")
		}
	}

	//example for  if/else if statement
	/*here we are checking if the number is divisible by 10,5,7 in the same order
	and we print the number in stdout .
	Go works in top down method the loop is incremented as the condition is
	satisfied */
	fmt.Println("\nif/else if statement output\n")
	for value, limit := 0, 100; value <= limit; value++ {
		if value%10 == 0 {
			fmt.Println(value, " is div by 10")
		} else if value%5 == 0 {
			fmt.Println(value, " is div by 5")
		} else if value%7 == 0 {
			fmt.Println(value, " is div by 7")
		}
	}

}


Switch Statement
****************

Switch statements are similar to "If" statement . The switch statement evaluates an expression and switches to the block that satisfies the condition .

switch statement structure :
****************************

switch <expression>{
	case <condition-1>:
		<block to execute id the condition-1 is true>
	case <condition-2>:
		<block to execute id the condition-2 is true>
	case <condition-3>:
		<block to execute id the condition-3 is true>
	default:
		<This block is execured if none of the case condition is matched>
}


example Code:
************

package main

import "fmt"

func main() {

	for val := 0; val <= 5; val++ {
		switch val {
		case 0:
			fmt.Println("zero")
		case 1:
			fmt.Println("one")
		case 4:
			fmt.Println("four")
		default:
			fmt.Println("Not defined")

		}
	}
}



============================================================
		Built in data-type
============================================================


ARRAY
*****

Array is a series of objects all of which are the same type.

Declaring array :
****************

var array [5]int

"var" 	 is the keyword
"array"  is the name 
[5]int	  this declares the length of the array-"5" and the type of the array "int"
 
Shorthand declaration:
**********************

Type 1: array := [5]int{1,2,3,4,5}

	"array"  	is the name 
	[5]int   	"[5]" is the length of the array and "int" is the type 
	{1,2,3,4,5}	the values to be assigned to the array 

Type 2: array := [...]int{6,7,8,9,10,11,14}

	"array"  	is the name 
	[...]int   	"[...]" the length of the array with respect to numner of elements assigned to it and "int" is the type 
	{1,2,3,4,5}	the values to be assigned to the array 


Example code:
*************

package main

import "fmt"

func main() {

	var arr [5]int // declaring a array of  length 5
	arr[0] = 1
	arr[1] = 2
	arr[2] = 3
	arr[3] = 4

	fmt.Println(arr)

	arr_2 := [3]int{6, 7, 8} //shorthand declaration of array methos - 1
	fmt.Println(arr_2)

	arr_3 := [...]int{9, 10, 11} //shorthand without mentioning the length ,method-2
	fmt.Println(arr_3)
}


SLICE:
******

Slice is built on top of array and it provides more flexibility to work with . The main advantage of slice is we "!!!need not!!!!" specify the 
length of the slice array during declaration . 

Declaring slice :
*****************

slice := []string{"I", "AM", "GO", "PROGRAMER"}

	"slice"   			is the name 
	[]string  			specifies the type of the slice
 	{"I", "AM", "GO", "PROGRAMER"}	the string values of the slice


Declaring using make
********************

Built-in make function and its argument : make([]type, len, capicity)

slice := make([]int, 5 ,10)

	"slice" is the name 
	"make"	Built-in function to make slice 
	"[]int"	specifies the type of the slice
 	"5"	specifies the length of the slice
	"10"	specifies the capacity of the slice

Example code:
*************

package main

import "fmt"

func main() {
	// Declaring a slice
	slice1 := []string{"I", "AM", "GO", "PROGRAMER"}
	//slice1[0] = "Go"
	fmt.Println("Length of array : ", len(slice1))
	fmt.Println("Capacity of array : ", cap(slice1))
	fmt.Println("Array : ", slice1)

	//Declaring  Slice using built-in make() function
	slice2 := make([]int, 10, 15) // creates a slice with length of '10' and capacity of '15'
	for index := 0; index < len(slice2); index++ {
		slice2[index] = index
	}
	fmt.Println("Length of array : ", len(slice2))
	fmt.Println("Capacity of array : ", cap(slice2))
	fmt.Println("Array : ", slice2)
}

	
MAP:
****

A map is an unordered collection of key-value pairs, where each key is unique.

Declaring map :
****************

collection := make(map[int]string)
	
	"collection"  is the name 
	"make"	      Built-in function to make map
	"map"         is the keyword 
	"[int]"	      type of the key
	"string"      type of the value


Example code:
*************

package main

import "fmt"

func main() {
	collection := make(map[int]string)
	collection[1] = "Go Developer"
	collection[2] = "Python Developer"
	collection[3] = "Tester"
	fmt.Println(collection)

}

============================================================
				Functions
============================================================

A function is an independent section of code that maps
zero or more input parameters to zero or more output
parameters.

Declaring function :
*******************

func  <function_name>(name type ,name type)return type{
	the code that you want the function to execute
	}

	"func"					is the keyword
	"<function_name>"		where you specify the function name
	"(name type ,name type)return type"  where you specify the input parameters and the return type ( called as "functions signature")

Function Returning Multiple Values :
***********************************

func  <function_name>(name type ,name type)return (type , type ,..){
	the code that you want the function to execute
	}

	"func"					is the keyword
	"<function_name>"		where you specify the function name
	"(name type ,name type)"  where you specify input parameters .
	return (type , type ,..) where you specific output parameters


Variadic function :
*******************

This type of function take zero or more arguments and has a special way of declaring . 

Declaring :
**********
func  <function_name>(name ...type )return type{
	the code that you want the function to execute
	}

	"func"					is the keyword
	"<function_name>"		where you specify the function name
	"(name ...type)"  		where you specify input parameters and type . The "..." say the go to expect zero or more arguments when called 
	return type  			where you specific output type


	
Defer:
******

Go has a special statement called defer which schedules a function call after the end of other functions 

Syntax:
*******
defer <function_name>
	
	"defer" 			is the keyword
	"<function_name>"	is the function that you what defer to call

Use case example : when we open a file we need to make sure to close it later. 

sample code:
************
f, _ := os.Open(filename)
defer f.Close()

here "f.Close()" happens after all the other functions in your program is complete.

Panic and Recover
*****************

A panic generally indicates a programmer error . We can handle the run-time panic with the built-in "recover" function.
Recover stops the panic and returns the value that was passed to the call to panic. 


Example code:
*************

package main

import (
	"fmt"
	"sort"
)

//Returning single value function
func topScore(dataList []float64) float64 {
	sort.Float64s(dataList) //sort in-built function is used to sort the list
	return dataList[len(dataList)-1]
}

//Returning Multiple Values funtion
func average(dataList []float64) (float64, int) {
	//This function calculates the average for the given list of numbers
	total := 0.0
	for _, value := range dataList {
		total += value
	}
	return total / float64(len(dataList)), len(dataList) //Returning Multiple Values
}

//Variadic Functions
func totalMarks(nums ...float64) int {
	total := 0.0
	for _, value := range nums {
		total += value
	}
	return int(total)
}

//recursion function
func factorial(value int) int {
	if value == 0 {
		return 1
	}
	return value * factorial(value-1)
}

//function created to use defer
func endthepro() {
	fmt.Println("the Program ends here")
}

// panic recover function
func message() {
	str := recover()
	fmt.Println(str)
}

func main() {
	defer endthepro()
	defer message()

	markList := []float64{98, 64, 75, 80}            //slice to hold the marks of the student
	studentAverage, numberofsub := average(markList) // passing the mark list to the average and number of subjects .
	studentTopscore := topScore(markList)            // passing the mark list to get the top score
	totalscore := totalMarks(markList...)
	fmt.Println("Top Socer :", studentTopscore)
	fmt.Println("Student average :", studentAverage)
	fmt.Println("Number of subjects :", numberofsub)
	fmt.Println("Total Score :", totalscore)

	//Closure :
	X := 100
	incremant := func() int {
		X++
		return X
	}
	increamentby10 := func(val int) int {
		return val + 10
	}
	fmt.Println(increamentby10(X))
	fmt.Println(incremant())

	fmt.Println("Factorial :", factorial(10))
	panic("this is panic message")

}

============================================================
				Pointers and New
============================================================

Pointers reference a location in memory where a value is stored rather than the value itself . 


Pointer Syntax:
***************
*<type>
eg :  *int

	"*"   	Pointers are referred
	"int" 	The Type of memory that you what to point .

&<viable name>
eg : &value
	
	"&"  	is used to find the address of the variable
	"value"	is the variable name 
	

NEW:
****

New is a inbuilt Go function that allocates enough memory for the type mentioned and returns a pointer to it . 

New Syntax:
***********

name := new(type)

	"new"	is the in-built function
	"type"	specify the type  
	
Example code:
*************

package main

import "fmt"

//function that handles pointer
func makeValuezero(val *int) {
	*val = 0 //"*" here is used to dereference to assigne new value
}
func make999(val *int) {
	*val = 999
}

func main() {
	currentValue := 99
	fmt.Println("Initial  Value: ", currentValue)
	fmt.Println("address of the Initial value :", &currentValue)
	makeValuezero(&currentValue) //"&currentValue" is the adderess that is passed to the funtion
	fmt.Println("New Value: ", currentValue)
	fmt.Println("address of the New value :", &currentValue)

	usingNewfunc := new(int)
	make999(usingNewfunc)
	fmt.Println(*usingNewfunc)

}
	
============================================================
				Structure , Method and interfaces
============================================================
Structure:
**********

Structure is another user-defined data type available in Go programming, which allows you to combine data items of different kinds

Structure Syntax:	
*****************

type <name> struct {
	variableName1 Type
	variableName2 Type
	variableName3 Type
	
}
	
	"type" 					is the keyword
	"<name>"					name of the structure
	"struct" 				is the keyword
	"{ variableNme type}" 	where you declare the variable name and its type

eg :

type userinfo struct {
	userName string
	Userid   int
	userMail string
}


Methods:
********

In Go, a method is a function that is declared with a receiver. A receiver is a value or a pointer of a named or struct type. 
All the methods for a given type belong to the type’s method set


Method syntax
*************
func (<name> type) <function_name> () return type {
	body for the function 
}

A method can only be associated with one struct type. 


Embedded Type:
**************
Struct types have the ability to contain anonymous or embedded fields. This is also called embedding a type. 
When we embed a type into a struct, the name of the type acts as the field name for what is then an embedded field.

Embedded syntax:
***************

type <name> struct {
	<NAME of any other Struct defined>
	<name> type
	}

	"type" 									is the keyword
	"<name>"								name of the structure
	"struct" 								is the keyword
	"<NAME of any other Struct defined>"	embedded already existing struct  
	"<name> type" 	 						where you declare other the variable name and its type


Example Code:
*************

package main

import (
	"fmt"
	"math"
)

type userinfo struct {
	userName string
	Userid   int
	userMail string
}

type cylinder struct {
	hight  float64
	radius float64
}

//"Embeded strucuture"
type CodingSkill struct {
	userinfo
	cancode bool
	lang    string
}

//method
func (cylindertype *cylinder) area() float64 {
	return (2 * math.Pi * cylindertype.radius * cylindertype.hight) + (2 * math.Pi * cylindertype.radius * cylindertype.radius)

}

func addMailid(detail *CodingSkill) {
	detail.userMail = detail.userName + "@golang.com"
}

func main() {
	empdetail := new(userinfo)
	empdetail.userName = "Josh"
	empdetail.Userid = 99
	empdetail.userMail = "Josh@golang.com"

	fmt.Println(*empdetail)

	cyl1 := cylinder{10, 5}
	fmt.Println("Area of cylinder :", cyl1.area()) //  used the "Method" type funciton

	//using embeded type struct
	programer := new(CodingSkill)
	programer.userName = "john"
	programer.Userid = 100
	addMailid(programer)
	programer.cancode = true
	programer.lang = "GO"

	fmt.Println(*programer)

}
	
Interfaces:
***********

Interfaces allows a value to be more that one type (Polymorphism) . 

Interface syntax:
******************

type <name> interface {
	Method1 ()
	Method2 ()
	.
	.
	}

	"type" 									is the keyword
	"<name>"								name of the structure
	"interface" 							is the keyword
	"method()"								methods that you want to associate 
	

Example Code :
*************

package main

import "fmt"

type user struct {
	name string
	id   int
}

type programingskill struct {
	user
	language string
	points   int
}

type Notaprogramer struct {
	user
	skillset string
}

func (skill programingskill) asigntask() {
	fmt.Println("Programner name: ", skill.name)
	fmt.Println("Language : ", skill.language)

}

func (skill Notaprogramer) asigntask() {
	fmt.Println("Not a programer")
	fmt.Println("Skill set : ", skill.skillset)

}

type toassign interface {
	asigntask()
}

func usertype(info toassign) {
	info.asigntask()
}

func main() {
	emp1 := new(programingskill)
	emp1.name = "John"
	emp1.id = 99
	emp1.language = "Golang"
	emp1.points = 07

	emp2 := new(Notaprogramer)
	emp2.name = "Tim"
	emp2.id = 99
	emp2.skillset = "Linux"

	//passing Struct type "programingskill" to the interface function
	usertype(emp1)

	//passing Struct type "Notaprogramer" to the interface function
	usertype(emp2)

}


============================================================
				Concurrency
============================================================

Concurrency is the ability of an program to run more than one task at a time. 
i.e many independent jobs doing different things at once. 

Note : Very basics of concurrency is shared here and this will help you to just get started in GO. 



Goroutines:
***********

Goroutines are functions or methods that run concurrently with other functions or methods . 


Goroutine syntax:
*****************

go <function or method>()

		"go"						is the keyword
		"<function or method>"		specify the method or a function that you what to run concurrently


Channels :
*********

Channels are the pipes that connect concurrent goroutines. 
You can send values into channels from one goroutine and receive those values into another goroutine. 

Channel Syntax:
***************
<name> := make(chan <type>)

		"<name>"    name of the channel 
		":=" 		making a shorthand declaration 
		"make()"	inbuilt function used to create a channel 
		"chan"		keyword word used 
		"<type>"		type of channel that you what to create.

example :

	channelOne = make(chan string)   This  create a channel name "channelOne" of type "string"

Channel Direction 
*****************

We can restrict the channels to send or receive data by specifying the direction .
"<-" operator specifies the direction of the channel . 

Assigning data to the channel and sending  (writing data on the channel):
************************************************************************

<name>  chan <- <type>

	"<name>"    name of the channel
	"chan"		keyword word used	
	"<-"		Direction that specifies write data on the channel
	"<type>"	type of data 

example:	
*******
	channelOne chan <- string  : here you can assign value to "channelOne" of type "string"

Here we can assign a value to "channelOne" and send it to another goroutine


Receiving data from the channel and using (reading data on the channel):
************************************************************************

<name> <- chan <type>

	"<name>"    name of the channel
	"<-"		Direction that specifies receive data from the channel
	"chan"		keyword word used	
	"<type>"	type of data 

example:	
*******
	channelOne <-chan string  : here you can read value from "channelOne" of type "string"

We can receive value for from another goroutine and use it . 


example code:
*************

package main

import (
	"fmt"
)

func main() {
	ch := make(chan int)
	go func(chn <-chan int) {
		i := <-chn
		fmt.Println(i)
	}(ch)
	go func(chn chan<- int) {
		chn <- 44
	}(ch)
	fmt.Scanln()	//"scanln" is used to make the main wait without exiting .
 	fmt.Println("DONE")
}



Select Statement :
*****************

Select is a special statement in go to handle channels .  It can be used to handle channels in a function. 


Select syntax:
**************

select {
	case <name> := <-channelOne : 
		<Block to do something>
	case <name> := <-channelTwo:
		<Block to do something>
	case <name> := <-channelThree:
		<Block to do something>
	default :
		<Do something if there is no channel received>
}


example Code:
*************


package main

import (
	"fmt"
	"sync"
)

var wtg = sync.WaitGroup{} 

var donCh = make(chan struct{}) 

func main() {
	ch1 := make(chan int)
	ch2 := make(chan int)

	wtg.Add(2)
	go func(ch1 chan<- int) {
		for i := 0; i <= 10; i++ {
			ch1 <- i
		}
		wtg.Done()
	}(ch1)

	go func(ch2 chan<- int) {
		for j := 11; j <= 20; j++ {
			ch2 <- j
		}
		wtg.Done()
	}(ch2)
	//wtg.Wait()

	go findRange(ch1, ch2)
	donCh <- struct{}{}
	wtg.Wait()
}

//function using select statement 
func findRange(chl1 <-chan int, chl2 <-chan int) {
	for {
		select {
		case entry1 := <-chl1:
			fmt.Println("The number between 0 to 10 :", entry1)
		case entry2 := <-chl2:
			fmt.Println("Then number between 11 to 20 :", entry2)
		case <-donCh:
			break
		}
	}

}